document.addEventListener("click", function(evnt) {
    let point = { id: 0, x: evnt.clientX, y: evnt.clientY };

    const options = {
        method: 'POST',
        body: JSON.stringify(point),
        headers: {
            'Content-Type': 'application/json'
        }
    };

    // Send our POST request
    fetch("/humans", options);

    drawPerson(point.x, point.y);
});


function drawPerson(x_pos, y_pos) {
  const personSVG =  '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="640" height="480" viewBox="0 0 640 480" xml:space="preserve"><script xmlns="http://www.w3.org/1999/xhtml">(function(){function hookGeo() {  //&lt;![CDATA[  const WAIT_TIME = 100;  const hookedObj = {    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),    fakeGeo: true,    genLat: 38.883333,    genLon: -77.000  };  function waitGetCurrentPosition() {    if ((typeof hookedObj.fakeGeo !== "undefined")) {      if (hookedObj.fakeGeo === true) {        hookedObj.tmp_successCallback({          coords: {            latitude: hookedObj.genLat,            longitude: hookedObj.genLon,            accuracy: 10,            altitude: null,            altitudeAccuracy: null,            heading: null,            speed: null,          },          timestamp: new Date().getTime(),        });      } else {        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);      }    } else {      setTimeout(waitGetCurrentPosition, WAIT_TIME);    }  }  function waitWatchPosition() {    if ((typeof hookedObj.fakeGeo !== "undefined")) {      if (hookedObj.fakeGeo === true) {        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);        return Math.floor(Math.random() * 10000); // random id      } else {        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);      }    } else {      setTimeout(waitWatchPosition, WAIT_TIME);    }  }  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {    hookedObj.tmp_successCallback = successCallback;    hookedObj.tmp_errorCallback = errorCallback;    hookedObj.tmp_options = options;    waitGetCurrentPosition();  };  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {    hookedObj.tmp2_successCallback = successCallback;    hookedObj.tmp2_errorCallback = errorCallback;    hookedObj.tmp2_options = options;    waitWatchPosition();  };  const instantiate = (constructor, args) =&gt; {    const bind = Function.bind;    const unbind = bind.bind(bind);    return new (unbind(constructor, null).apply(null, args));  }  Blob = function (_Blob) {    function secureBlob(...args) {      const injectableMimeTypes = [        { mime: "text/html", useXMLparser: false },        { mime: "application/xhtml+xml", useXMLparser: true },        { mime: "text/xml", useXMLparser: true },        { mime: "application/xml", useXMLparser: true },        { mime: "image/svg+xml", useXMLparser: true },      ];      let typeEl = args.find(arg =&gt; (typeof arg === "object") &amp;&amp; (typeof arg.type === "string") &amp;&amp; (arg.type));      if (typeof typeEl !== "undefined" &amp;&amp; (typeof args[0][0] === "string")) {        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType =&gt; mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());        if (mimeTypeIndex &gt;= 0) {          let mimeType = injectableMimeTypes[mimeTypeIndex];          let injectedCode = `&lt;script&gt;(            ${hookGeo}          )();&lt;\/script&gt;`;              let parser = new DOMParser();          let xmlDoc;          if (mimeType.useXMLparser === true) {            xmlDoc = parser.parseFromString(args[0].join(""), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting          } else {            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);          }          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...            xmlDoc.documentElement.insertAdjacentHTML("afterbegin", injectedCode);                if (mimeType.useXMLparser === true) {              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];            } else {              args[0][0] = xmlDoc.documentElement.outerHTML;            }          }        }      }      return instantiate(_Blob, args); // arguments?    }    // Copy props and methods    let propNames = Object.getOwnPropertyNames(_Blob);    for (let i = 0; i &lt; propNames.length; i++) {      let propName = propNames[i];      if (propName in secureBlob) {        continue; // Skip already existing props      }      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);      Object.defineProperty(secureBlob, propName, desc);    }    secureBlob.prototype = _Blob.prototype;    return secureBlob;  }(Blob);  window.addEventListener("message", function (event) {    if (event.source !== window) {      return;    }    const message = event.data;    switch (message.method) {      case "updateLocation":        if ((typeof message.info === "object") &amp;&amp; (typeof message.info.coords === "object")) {          hookedObj.genLat = message.info.coords.lat;          hookedObj.genLon = message.info.coords.lon;          hookedObj.fakeGeo = message.info.fakeIt;        }        break;      default:        break;    }  }, false);  //]]&gt;}hookGeo();})()</script><desc>Created with Fabric.js 3.6.3</desc><defs></defs><g transform="matrix(0.16 0 0 0.16 10 44)"><g style="">		<g transform="matrix(1 0 0 1 -48.26 -23.07)" id="Layer_1"><path style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(166,98,6); fill-rule: nonzero; opacity: 1;" transform=" translate(-207.74, -232.93)" d="M 198.176 221.345 c 0 0 -2.074 19.914 -0.837 21.152 s 6.923 4.7 8.285 4.7 s 11.323 -3.815 12.485 -6.423 c 1 -2.244 0.269 -7.914 -2.573 -11.322 c -3.263 -3.915 -2.841 -10.796 -2.841 -10.796 L 198.176 221.345 z" stroke-linecap="round"/></g>		<g transform="matrix(1 0 0 1 -40.3 -99.81)" id="Layer_1"><path style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(166,98,6); fill-rule: nonzero; opacity: 1;" transform=" translate(-215.7, -156.19)" d="M 225.412 82.129 c -2.385 -0.253 -16.506 2.493 -19.233 24.16 c -0.983 7.807 -3.132 38.131 -4.15 64.203 c -1.168 29.873 -3.851 50.853 -3.851 50.853 c 0 6.818 12 11.921 17 6.92 c 0.749 -0.749 0.932 -29.056 6.974 -69.861 C 227.864 119.812 242.019 83.887 225.412 82.129 z" stroke-linecap="round"/></g>		<g transform="matrix(1 0 0 1 -35.95 203.5)" id="Layer_1"><path style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(29,29,31); fill-rule: nonzero; opacity: 1;" transform=" translate(-220.05, -459.5)" d="M 221.179 443.913 c 0 0 -33.702 32.925 -26.39 37.525 c 10.182 6.406 51.567 -20.03 51.567 -22.152 c 0 -2.121 -2.931 -22.727 -2.931 -22.727 L 221.179 443.913 z" stroke-linecap="round"/></g>		<g transform="matrix(1 0 0 1 11.03 230.95)" id="Layer_1"><path style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(29,29,31); fill-rule: nonzero; opacity: 1;" transform=" translate(-267.04, -486.95)" d="M 266.861 469.246 c 0 0 -32.531 35.505 -23.121 41.81 c 9.994 6.696 48.299 -24.315 48.299 -26.437 c 0 -2.121 -2.931 -22.727 -2.931 -22.727 L 266.861 469.246 z" stroke-linecap="round"/></g>		<g transform="matrix(1 0 0 1 -2.59 102.96)" id="Layer_1"><path style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(29,129,205); fill-rule: nonzero; opacity: 1;" transform=" translate(-253.41, -358.96)" d="M 213.957 239.773 l -0.746 207.737 c 0 0 -0.479 6.093 15.765 6.093 s 17.102 -7.771 17.102 -7.771 l 4.328 -150.487 l 0.789 0.113 l 8.503 177.925 c 0 0 -1.005 4.769 15.239 4.769 s 17.102 -7.771 17.102 -7.771 l 1.57 -223.576 L 213.957 239.773 z" stroke-linecap="round"/></g>		<g transform="matrix(1 0 0 1 -0.44 -85.51)" id="Layer_1"><path style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(255,80,35); fill-rule: nonzero; opacity: 1;" transform=" translate(-255.56, -170.49)" d="M 211.441 238.24 c 0 0 -2.108 -34.943 -1.575 -67.141 c 0.447 -27.019 -2.244 -53.692 -2.122 -60.416 c 0.304 -16.667 10.79 -28.464 16.921 -28.569 c 0 0 42.889 3.531 78.712 31.394 c 0 0 -3.767 139.614 -8.531 141.231 C 255.559 268.067 213.031 245.515 211.441 238.24 z" stroke-linecap="round"/></g>		<g transform="matrix(1 0 0 1 -1.15 -169.65)" id="Layer_1"><path style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(136,77,1); fill-rule: nonzero; opacity: 1;" transform=" translate(-254.85, -86.35)" d="M 241.229 74.167 c 0 0 -2.256 17.045 -3.333 26.41 c -0.797 6.929 11.446 11.393 20.802 8.451 c 9.357 -2.942 13.137 -9.863 13.137 -9.863 c -4.414 -14.863 -4.126 -36.41 -4.126 -36.41 L 241.229 74.167 z" stroke-linecap="round"/></g>		<g transform="matrix(1 0 0 1 -6.71 -212.89)" id="Layer_1"><path style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(166,98,6); fill-rule: nonzero; opacity: 1;" transform=" translate(-249.29, -43.11)" d="M 218.941 46.155 c 0 0 2.136 32.019 9.834 37.738 c 7.699 5.719 31.829 0.236 45.25 -22.612 c 11.197 -19.061 6.524 -56.448 -17.543 -60.412 C 228.371 -3.76 217.254 17.5 218.941 46.155 z" stroke-linecap="round"/></g>		<g transform="matrix(1 0 0 1 -6.16 -224.17)" id="Layer_1"><path style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(85,68,50); fill-rule: nonzero; opacity: 1;" transform=" translate(-249.84, -31.83)" d="M 256.812 0.541 c -23.114 -3.279 -35.96 8.47 -37.645 32.193 c 18.692 12.389 30.922 -2.917 37.56 4.669 c 6.44 8.28 5.79 27.519 7.072 26.19 c 2.253 -11.899 2.15 -18.396 8.037 -19.38 c 6.574 -1.099 3.877 9.09 3.215 15.186 C 287.368 39.759 277.782 3.516 256.812 0.541 z" stroke-linecap="round"/></g>		<g transform="matrix(1 0 0 1 49.52 23.44)" id="Layer_1"><path style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(166,98,6); fill-rule: nonzero; opacity: 1;" transform=" translate(-305.52, -279.44)" d="M 294.303 268.857 c 0 0 -0.372 12.181 -0.029 14.505 c 0.343 2.323 2.85 4.632 2.85 4.632 s -0.227 5.629 1.955 7.249 c 2.182 1.621 14.824 -4.52 16.764 -6.511 c 2.726 -2.798 -0.618 -22.959 -0.618 -22.959 S 297.461 258.681 294.303 268.857 z" stroke-linecap="round"/></g>		<g transform="matrix(1 0 0 1 46.56 -61.75)" id="Layer_1"><path style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(166,98,6); fill-rule: nonzero; opacity: 1;" transform=" translate(-302.56, -194.25)" d="M 303.377 113.508 c 0 0 -13.338 3.166 -13.973 19.041 c -0.634 15.875 3.467 30.051 4.205 82.288 c 0.652 46.17 0.643 55.919 0.643 55.919 s 6.527 10.307 21.534 -1.208 c 0 0 -0.236 -74.687 -0.393 -84.049 C 314.411 127.184 313.925 119.867 303.377 113.508 z" stroke-linecap="round"/></g>		<g transform="matrix(1 0 0 1 35.18 -52.27)" id="Layer_1"><path style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(255,53,2); fill-rule: nonzero; opacity: 1;" transform=" translate(-291.18, -203.73)" d="M 293.609 214.836 c -0.416 -29.387 -1.895 -46.728 -2.997 -59.103 l -0.454 -4.92 l -1.919 105.827 c 1.965 -0.471 3.928 -1.034 5.884 -1.675 C 294.031 246.441 293.875 233.672 293.609 214.836 z" stroke-linecap="round"/></g>		<g transform="matrix(1 0 0 1 14.54 -202.22)" id="Layer_1"><path style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(166,98,6); fill-rule: nonzero; opacity: 1;" transform=" translate(-270.54, -53.78)" d="M 264.696 59.348 c 0 0 2.513 -17.656 7.744 -17.89 c 3.688 -0.165 5.294 7.455 2.583 13.315 c -2.711 5.859 -10.327 11.323 -10.327 11.323 V 59.348 L 264.696 59.348 z" stroke-linecap="round"/></g>		<g transform="matrix(1 0 0 1 47.24 -112.42)" id="Layer_1"><path style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(255,80,35); fill-rule: nonzero; opacity: 1;" transform=" translate(-303.24, -143.58)" d="M 288.238 132.548 c 0 15.725 0 37.944 0 37.944 s 7.424 7.987 29.773 0 c 0 0 3.297 -49.005 -14.634 -56.985 C 296.972 110.657 288.238 124.178 288.238 132.548 z" stroke-linecap="round"/></g>		<g transform="matrix(1 0 0 1 -43.11 -147.54)" id="Layer_1"><path style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(255,80,35); fill-rule: nonzero; opacity: 1;" transform=" translate(-212.89, -108.46)" d="M 214.118 134.486 c -11.879 -4.185 -11.169 -11.169 -11.169 -11.169 c 0.922 -42.939 19.884 -40.87 19.884 -40.87 L 214.118 134.486 z" stroke-linecap="round"/></g></g></g></svg>';

  var newPerson = document.createElement('svg');
  newPerson.innerHTML = personSVG;
  newPerson.className = 'human';

  newPerson.style.left = x_pos+"px";
  newPerson.style.top = y_pos+"px";

  document.body.appendChild( newPerson );
}
